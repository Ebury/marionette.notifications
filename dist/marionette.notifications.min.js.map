{"version":3,"sources":["marionette.notifications.js"],"names":["oldConstructor","Marionette","Application","extend","notificationTemplate","notificationViewEl","notificationCloseSelector","notificationAutoremove","notificationAutoremoveAfter","notificationAnimation","_notificationModel","Backbone","Model","defaults","type","message","_notificationCollection","Collection","model","this","_notificationView","ItemView","getTemplate","options","ui","closeButton","events","click @ui.closeButton","init","_this","$el","hide","slideDown","to","setTimeout","close","e","clearTimeout","stopPropagation","slideUp","destroy","_notificationsView","CollectionView","childView","onAddChild","childViewOptions","createNotificationsView","extendedOptions","_","el","collection","notificationsView","render","addNotification","unshift","constructor","apply","arguments"],"mappings":"AAAA,YAIA,IAAIA,gBAAiBC,WAAWC,WAEhCD,YAAWC,YAAcD,WAAWC,YAAYC,QAE9CC,qBAAsB,4BACtBC,mBAAoB,yBACpBC,0BAA2B,yBAC3BC,wBAAwB,EACxBC,4BAA6B,GAC7BC,uBAAuB,EAOvBC,GAAIA,sBACF,MAAOC,UAASC,MAAMT,QACpBU,UACEC,KAAM,KACNC,QAAS,SAUfC,GAAIA,2BACF,MAAOL,UAASM,WAAWd,QACzBe,MAAOC,KAAKT,sBAShBU,GAAIA,qBACF,MAAOnB,YAAWoB,SAASlB,QACzBmB,YAAa,WACX,MAAOH,MAAKI,QAAQnB,sBAGtBoB,IACEC,YAAaN,KAAKb,2BAGpBoB,QACEC,wBAAyB,SAM3BC,KAAM,WACJ,GAAIC,GAAQV,IAERA,MAAKI,QAAQd,wBAEfU,KAAKW,IAAIC,OACTZ,KAAKW,IAAIE,aAGPb,KAAKI,QAAQhB,yBAEfY,KAAKc,GAAKC,WAAW,WACnBL,EAAMM,SACsC,IAA3ChB,KAAKI,QAAQf,+BAQpB2B,MAAO,SAAUC,GAEfC,aAAalB,KAAKc,IAEdG,GACFA,EAAEE,iBAGJ,IAAIT,GAAQV,IAERA,MAAKI,QAAQd,sBAEfU,KAAKW,IAAIS,QAAQ,WACfV,EAAMX,MAAMsB,YAGdX,EAAMX,MAAMsB,cAWpBC,GAAIA,sBACF,MAAOxC,YAAWyC,eAAevC,QAC/BwC,UAAWxB,KAAKC,kBAEhBwB,WAAY,SAASD,GACnBA,EAAUf,QAGZiB,iBAAkB,WAChB,OACEzC,qBAAsBe,KAAKI,QAAQnB,qBACnCK,sBAAuBU,KAAKI,QAAQd,sBACpCF,uBAAwBY,KAAKI,QAAQd,sBACrCD,4BAA6BW,KAAKI,QAAQf,iCAalDsC,wBAAyB,SAAUvB,GACjCA,EAAUA,KACV,IAAIwB,GAAkBC,EAAE7C,QACtB8C,GAAI9B,KAAKd,mBACT6C,WAAY,GAAI/B,MAAKH,wBACrBZ,qBAAsBe,KAAKf,qBAC3BK,sBAAuBU,KAAKV,sBAC5BF,uBAAwBY,KAAKZ,uBAC7BC,4BAA6BW,KAAKX,6BACjCe,EAGH,OAFAJ,MAAKgC,kBAAoB,GAAIhC,MAAKsB,mBAAmBM,GACrD5B,KAAKgC,kBAAkBC,SAChBjC,KAAKgC,mBAQdE,gBAAiB,SAAUvC,EAAMC,GAC3BI,KAAKgC,mBACPhC,KAAKgC,kBAAkBD,WAAWI,QAAQ,GAAInC,MAAKT,oBACjDI,KAAMA,EACNC,QAASA,MASfwC,YAAa,WACXvD,eAAewD,MAAMrC,KAAMsC,WAC3BtC,KAAK2B,wBAAwBW","file":"marionette.notifications.min.js","sourcesContent":["'use strict';\n\n/* globals Marionette, Backbone, _ */\n\nvar oldConstructor = Marionette.Application;\n\nMarionette.Application = Marionette.Application.extend({\n\n  notificationTemplate: '.js-notification-template',\n  notificationViewEl: '.js-notifications-view',\n  notificationCloseSelector: '.js-notification-close',\n  notificationAutoremove: true,\n  notificationAutoremoveAfter: 10,\n  notificationAnimation: true,\n\n  /**\n   * Getter for the Backbone model class used to handle a single notification\n   * @returns {object} Notification model class\n   * @private\n   */\n  get _notificationModel() {\n    return Backbone.Model.extend({\n      defaults: {\n        type: null,\n        message: null\n      }\n    });\n  },\n\n  /**\n   * Getter for the Backbone collection class used to handle a list of notifications\n   * @returns {object} Notification collection class\n   * @private\n   */\n  get _notificationCollection() {\n    return Backbone.Collection.extend({\n      model: this._notificationModel\n    });\n  },\n\n  /**\n   * Getter for the Marionette ItemView class used to render a single notification\n   * @returns {object} Notification view class\n   * @private\n   */\n  get _notificationView() {\n    return Marionette.ItemView.extend({\n      getTemplate: function(){\n        return this.options.notificationTemplate;\n      },\n\n      ui: {\n        closeButton: this.notificationCloseSelector\n      },\n\n      events: {\n        'click @ui.closeButton': 'close'\n      },\n\n      /**\n       * Initializes the view after being rendered and added to the DOM\n       */\n      init: function () {\n        var _this = this;\n\n        if (this.options.notificationAnimation) {\n          // Notification appears with a slideDown animation\n          this.$el.hide();\n          this.$el.slideDown();\n        }\n\n        if (this.options.notificationAutoremove) {\n          // Auto-removes the notification after notificationAutoremoveAfter seconds\n          this.to = setTimeout(function () {\n            _this.close();\n          }, this.options.notificationAutoremoveAfter * 1000);\n        }\n      },\n\n      /**\n       * Destroys a notification\n       * @param e {Event} event that has executed this method\n       */\n      close: function (e) {\n        // Clear the timeout for auto-removing the notification\n        clearTimeout(this.to);\n\n        if (e) {\n          e.stopPropagation();\n        }\n\n        var _this = this;\n\n        if (this.options.notificationAnimation) {\n          // Hide the notification with a slideUp animation and then it is destroyed\n          this.$el.slideUp(function () {\n            _this.model.destroy();\n          });\n        } else {\n          _this.model.destroy();\n        }\n      }\n    });\n  },\n\n  /**\n   * Getter for the Marionette CollectionView class used to render a list of notifications\n   * @returns {object} Notifications view class\n   * @private\n   */\n  get _notificationsView() {\n    return Marionette.CollectionView.extend({\n      childView: this._notificationView,\n\n      onAddChild: function(childView){\n        childView.init();\n      },\n\n      childViewOptions: function() {\n        return {\n          notificationTemplate: this.options.notificationTemplate,\n          notificationAnimation: this.options.notificationAnimation,\n          notificationAutoremove: this.options.notificationAnimation,\n          notificationAutoremoveAfter: this.options.notificationAutoremoveAfter\n        };\n      }\n    });\n  },\n\n  /**\n   * Creates a notifications view with the given options. View is attached to the application, so it's accessible later\n   * in the notificationsView property of the application\n   * @param options {object} dict passed to the notifications view class. If no el or collection properties are given,\n   * then the default ones are used (notificationsView value and a new instance of the notification collection class)\n   * @returns {object} Notifications view instance\n   */\n  createNotificationsView: function (options) {\n    options = options || {};\n    var extendedOptions = _.extend({\n      el: this.notificationViewEl,\n      collection: new this._notificationCollection(),\n      notificationTemplate: this.notificationTemplate,\n      notificationAnimation: this.notificationAnimation,\n      notificationAutoremove: this.notificationAutoremove,\n      notificationAutoremoveAfter: this.notificationAutoremoveAfter\n    }, options);\n    this.notificationsView = new this._notificationsView(extendedOptions);\n    this.notificationsView.render();\n    return this.notificationsView;\n  },\n\n  /**\n   * Adds a new notification to the notifications view of the application\n   * @param type {string} type of notification. This variable is used in used in the default notification template\n   * @param message {string} message of the notification. This variable is used in the default notification template\n   */\n  addNotification: function (type, message) {\n    if (this.notificationsView) {\n      this.notificationsView.collection.unshift(new this._notificationModel({\n        type: type,\n        message: message\n      }));\n    }\n  },\n\n  /**\n   * New constructor of the Marionette Application. It does the sames as the original constructor and it creates a\n   * notifications view using the default options\n   */\n  constructor: function () {\n    oldConstructor.apply(this, arguments);\n    this.createNotificationsView(arguments);\n  }\n});\n\n"],"sourceRoot":"/source/"}